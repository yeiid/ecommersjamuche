---
import Layout from "../layouts/Layout.astro";
import Button from "../components/ui/Button.astro";
---

<Layout title="Carrito de Compras | JAMUCHEE">
  <div class="container mx-auto px-4 py-12">
    <h1 class="text-3xl font-bold mb-8 text-gray-800 dark:text-white">
      Carrito de Compras
    </h1>

    <div id="cart-container" class="grid grid-cols-1 lg:grid-cols-3 gap-8">
      <!-- Lista de productos -->
      <div id="cart-items" class="lg:col-span-2 space-y-4">
        <div id="empty-cart-message" class="hidden text-center py-8">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            class="mx-auto h-12 w-12 text-gray-400 dark:text-gray-600 mb-4"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z"
            ></path>
          </svg>
          <p class="text-xl font-medium text-gray-600 dark:text-gray-400">
            Tu carrito está vacío
          </p>
          <div class="mt-6">
            <a
              href="/productos"
              class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500"
            >
              Ver productos
            </a>
          </div>
        </div>

        <!-- Mensaje de error del carrito -->
        <div
          id="cart-error"
          class="hidden bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-4 rounded-md"
        >
          <div class="flex items-center">
            <svg
              class="h-5 w-5 mr-2"
              xmlns="http://www.w3.org/2000/svg"
              viewBox="0 0 20 20"
              fill="currentColor"
            >
              <path
                fill-rule="evenodd"
                d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z"
                clip-rule="evenodd"></path>
            </svg>
            <span id="cart-error-message">Error en el carrito</span>
          </div>
        </div>

        <!-- Aquí se cargarán dinámicamente los productos -->
        <div id="cart-items-container"></div>
      </div>

      <!-- Resumen del pedido -->
      <div class="lg:col-span-1">
        <div class="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-md">
          <h2 class="text-lg font-semibold mb-4 text-gray-800 dark:text-white">
            Resumen del pedido
          </h2>

          <div class="space-y-3 mb-6">
            <div class="flex justify-between">
              <span class="text-gray-600 dark:text-gray-400">Subtotal</span>
              <span
                id="cart-subtotal"
                class="font-medium text-gray-800 dark:text-white">$0</span
              >
            </div>
            <div class="flex justify-between">
              <span class="text-gray-600 dark:text-gray-400">Envío</span>
              <span class="font-medium text-gray-800 dark:text-white"
                >Calculado en el checkout</span
              >
            </div>
            <div
              class="border-t border-gray-200 dark:border-gray-700 pt-3 mt-3"
            >
              <div class="flex justify-between">
                <span class="font-semibold text-gray-800 dark:text-white"
                  >Total</span
                >
                <span
                  id="cart-total"
                  class="font-semibold text-gray-800 dark:text-white">$0</span
                >
              </div>
            </div>
          </div>

          <Button
            id="checkout-button"
            fullWidth={true}
            disabled={true}
            class="mb-4"
          >
            Proceder al pago
          </Button>

          <Button
            id="whatsapp-button"
            variant="accent"
            fullWidth={true}
            disabled={true}
            class="mb-4"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              class="h-5 w-5 mr-2"
              fill="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                d="M.057 24l1.687-6.163c-1.041-1.804-1.588-3.849-1.587-5.946.003-6.556 5.338-11.891 11.893-11.891 3.181.001 6.167 1.24 8.413 3.488 2.245 2.248 3.481 5.236 3.48 8.414-.003 6.557-5.338 11.892-11.893 11.892-1.99-.001-3.951-.5-5.688-1.448l-6.305 1.654zm6.597-3.807c1.676.995 3.276 1.591 5.392 1.592 5.448 0 9.886-4.434 9.889-9.885.002-5.462-4.415-9.89-9.881-9.892-5.452 0-9.887 4.434-9.889 9.884-.001 2.225.651 3.891 1.746 5.634l-.999 3.648 3.742-.981zm11.387-5.464c-.074-.124-.272-.198-.57-.347-.297-.149-1.758-.868-2.031-.967-.272-.099-.47-.149-.669.149-.198.297-.768.967-.941 1.165-.173.198-.347.223-.644.074-.297-.149-1.255-.462-2.39-1.475-.883-.788-1.48-1.761-1.653-2.059-.173-.297-.018-.458.13-.606.134-.133.297-.347.446-.521.151-.172.2-.296.3-.495.099-.198.05-.372-.025-.521-.075-.148-.669-1.611-.916-2.206-.242-.579-.487-.501-.669-.51l-.57-.01c-.198 0-.52.074-.792.372s-1.04 1.016-1.04 2.479 1.065 2.876 1.213 3.074c.149.198 2.095 3.2 5.076 4.487.709.306 1.263.489 1.694.626.712.226 1.36.194 1.872.118.571-.085 1.758-.719 2.006-1.413.248-.695.248-1.29.173-1.414z"
              ></path>
            </svg>
            Pedir por WhatsApp
          </Button>

          <a
            href="/productos"
            class="block text-center text-primary-600 dark:text-primary-400 hover:underline"
          >
            Continuar comprando
          </a>
        </div>
      </div>
    </div>
  </div>
</Layout>

<script>
  import {
    cartItems,
    cartTotal,
    cartErrors,
    clearCart,
    addToCart,
    removeFromCart,
    removeItemCompletely,
    updateCartItemQuantity,
    ensureCartInitialized,
  } from "../stores/cartStore";
  import { contactInfo } from "../utils/config";
  import { generateWhatsAppMessage } from "../utils/cart-utils";
  import { validatePrice } from "../schemas/client.schema.js";

  document.addEventListener("DOMContentLoaded", () => {
    // Asegurar que el carrito está inicializado
    ensureCartInitialized();

    const cartItemsContainer = document.getElementById("cart-items-container");
    const emptyCartMessage = document.getElementById("empty-cart-message");
    const cartSubtotalElement = document.getElementById("cart-subtotal");
    const cartTotalElement = document.getElementById("cart-total");
    const cartErrorElement = document.getElementById("cart-error");
    const cartErrorMessageElement =
      document.getElementById("cart-error-message");
    const checkoutButton = document.getElementById(
      "checkout-button"
    ) as HTMLButtonElement | null;
    const whatsappButton = document.getElementById(
      "whatsapp-button"
    ) as HTMLButtonElement | null;

    // Inicializar botones basado en el estado actual del carrito
    const inicializarBotones = () => {
      const items = cartItems.get();
      const hayProductos = items && Object.keys(items).length > 0;

      if (checkoutButton) {
        checkoutButton.disabled = !hayProductos;
      }

      if (whatsappButton) {
        whatsappButton.disabled = !hayProductos;
      }
    };

    // Llamar inicialización de botones al cargar
    inicializarBotones();

    // Formatear precio en pesos colombianos
    const formatPrice = (price: number): string => {
      return new Intl.NumberFormat("es-CO", {
        style: "currency",
        currency: "COP",
        minimumFractionDigits: 0,
      }).format(price);
    };

    // Mostrar mensajes de error
    const showError = (message: string) => {
      if (cartErrorMessageElement && cartErrorElement) {
        cartErrorMessageElement.textContent = message;
        cartErrorElement.classList.remove("hidden");
      }
    };

    // Ocultar mensajes de error
    const hideError = () => {
      if (cartErrorElement) {
        cartErrorElement.classList.add("hidden");
      }
    };

    // Tipo para los items del carrito
    interface CartItem {
      id: string;
      name: string;
      price: number;
      discountprice?: number;
      image: string;
      quantity: number;
      description?: string;
      total: number;
    }

    // Proceder al checkout/pago
    const procederAlPago = (): void => {
      try {
        const items = cartItems.get() as Record<string, any>;

        // Verificar si hay elementos en el carrito
        if (!items || Object.keys(items).length === 0) {
          showError("No hay productos en el carrito para proceder al pago");
          return;
        }

        console.log("Procediendo al pago con los siguientes items:", items);

        // Aquí puedes redirigir a la página de checkout o implementar otro flujo
        // Si no existe una página de checkout, mostrar un mensaje alternativo
        alert(
          "La funcionalidad de pago está en desarrollo. Por favor, usa el botón de WhatsApp para completar tu pedido."
        );
      } catch (error) {
        console.error("Error al proceder al pago:", error);
        showError("Error al proceder al pago. Por favor, intenta de nuevo.");
      }
    };

    // Enviar pedido por WhatsApp
    const sendWhatsAppOrder = (): void => {
      try {
        // Obtenemos los items del carrito
        const items = cartItems.get();

        // Verificar si hay elementos en el carrito
        if (!items || Object.keys(items).length === 0) {
          showError("No hay productos en el carrito para enviar");
          return;
        }

        // Obtener total y formatearlo
        const total = cartTotal.get();
        const formattedTotal = formatPrice(total);

        // Generar mensaje para WhatsApp usando nuestra utilidad segura
        const encodedMessage = generateWhatsAppMessage(
          items,
          total,
          formattedTotal
        );

        // Obtener número de WhatsApp
        const phoneNumber = contactInfo.whatsappNumber;

        // Crear URL y abrir WhatsApp
        const whatsappUrl = `https://wa.me/${phoneNumber}?text=${encodedMessage}`;
        window.open(whatsappUrl, "_blank");

        console.log("Pedido enviado a WhatsApp correctamente");
      } catch (error) {
        console.error("Error al enviar pedido por WhatsApp:", error);
        showError(
          "Error al generar mensaje de WhatsApp. Por favor, intenta de nuevo."
        );
      }
    };

    // Renderizar los productos del carrito
    const renderCartItems = (items: Record<string, CartItem>): void => {
      if (!cartItemsContainer) return;

      if (Object.keys(items).length === 0) {
        if (emptyCartMessage) emptyCartMessage.classList.remove("hidden");
        cartItemsContainer.innerHTML = "";
        if (checkoutButton) checkoutButton.disabled = true;
        if (whatsappButton) whatsappButton.disabled = true;
        return;
      }

      if (emptyCartMessage) emptyCartMessage.classList.add("hidden");
      if (checkoutButton) checkoutButton.disabled = false;
      if (whatsappButton) whatsappButton.disabled = false;

      let itemsHTML = "";

      for (const [id, item] of Object.entries(items)) {
        // Comprobar si el item existe antes de acceder a sus propiedades
        if (!item) continue;

        const itemTotal = item.total;
        const priceToShow =
          item.discountprice && item.discountprice > 0
            ? item.discountprice
            : item.price;

        itemsHTML += `
          <div class="bg-white dark:bg-gray-800 p-4 rounded-lg shadow-sm flex flex-col sm:flex-row gap-4 relative" data-id="${id}">
            <img 
              src="${item.image}" 
              alt="${item.name}" 
              class="w-full sm:w-24 h-24 object-cover rounded-md"
            />
            
            <div class="flex-grow">
              <h3 class="font-medium text-gray-800 dark:text-white">${item.name}</h3>
              <p class="text-sm text-gray-500 dark:text-gray-400 line-clamp-1">${item.description || ""}</p>
              <div class="mt-2 flex items-center justify-between">
                <div class="font-medium text-gray-800 dark:text-white">${formatPrice(priceToShow)}</div>
                
                <div class="flex items-center border border-gray-300 dark:border-gray-700 rounded-md">
                  <button 
                    class="decrease-btn px-3 py-1 text-gray-600 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors rounded-l-md"
                    aria-label="Disminuir cantidad"
                    data-id="${id}"
                  >
                    -
                  </button>
                  <span class="item-quantity px-3 py-1">${item.quantity}</span>
                  <button 
                    class="increase-btn px-3 py-1 text-gray-600 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors rounded-r-md"
                    aria-label="Aumentar cantidad"
                    data-id="${id}"
                  >
                    +
                  </button>
                </div>
              </div>
              <div class="mt-1 text-right font-medium text-gray-800 dark:text-white">
                Total: ${formatPrice(itemTotal)}
              </div>
            </div>
            
            <button 
              class="remove-item absolute top-4 right-4 text-gray-400 hover:text-red-500 dark:text-gray-500 dark:hover:text-red-400 transition-colors"
              aria-label="Eliminar producto"
              data-id="${id}"
            >
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
              </svg>
            </button>
          </div>
        `;
      }

      cartItemsContainer.innerHTML = itemsHTML;

      // Agregar event listeners a los botones
      document.querySelectorAll(".decrease-btn").forEach((btn) => {
        btn.addEventListener("click", (e) => {
          try {
            const target = e.currentTarget as HTMLElement;
            const id = target.getAttribute("data-id") as string;
            const items = cartItems.get() as Record<string, any>;

            // Verificar que el id existe en el objeto items antes de acceder
            if (!items || !Object.prototype.hasOwnProperty.call(items, id)) {
              showError("Producto no encontrado en el carrito");
              return;
            }

            const item = items[id];

            if (!item) {
              showError("Producto no encontrado en el carrito");
              return;
            }

            if (item.quantity > 1) {
              removeFromCart(id);
            } else {
              // Confirmar eliminación si la cantidad es 1
              if (
                confirm(
                  "¿Estás seguro de que deseas eliminar este producto del carrito?"
                )
              ) {
                removeItemCompletely(id);
              }
            }
          } catch (error) {
            console.error("Error al disminuir cantidad:", error);
            showError(
              "No se pudo disminuir la cantidad. Por favor, intenta de nuevo."
            );
          }
        });
      });

      document.querySelectorAll(".increase-btn").forEach((btn) => {
        btn.addEventListener("click", (e) => {
          try {
            const target = e.currentTarget as HTMLElement;
            const id = target.getAttribute("data-id") as string;
            const items = cartItems.get() as Record<string, any>;

            // Verificar que el id existe en el objeto items antes de acceder
            if (!items || !Object.prototype.hasOwnProperty.call(items, id)) {
              showError("Producto no encontrado en el carrito");
              return;
            }

            const item = items[id];

            if (!item) {
              showError("Producto no encontrado en el carrito");
              return;
            }

            updateCartItemQuantity(id, item.quantity + 1);
          } catch (error) {
            console.error("Error al aumentar cantidad:", error);
            showError(
              "No se pudo aumentar la cantidad. Por favor, intenta de nuevo."
            );
          }
        });
      });

      document.querySelectorAll(".remove-item").forEach((btn) => {
        btn.addEventListener("click", (e) => {
          try {
            const target = e.currentTarget as HTMLElement;
            const id = target.getAttribute("data-id") as string;

            if (
              confirm(
                "¿Estás seguro de que deseas eliminar este producto del carrito?"
              )
            ) {
              removeItemCompletely(id);
            }
          } catch (error) {
            console.error("Error al eliminar producto:", error);
            showError(
              "No se pudo eliminar el producto. Por favor, intenta de nuevo."
            );
          }
        });
      });
    };

    // Actualizar el total del carrito
    const updateCartTotal = (total: number): void => {
      try {
        const formattedTotal = formatPrice(total);
        if (cartSubtotalElement)
          cartSubtotalElement.textContent = formattedTotal;
        if (cartTotalElement) cartTotalElement.textContent = formattedTotal;
      } catch (error) {
        console.error("Error al actualizar total:", error);
      }
    };

    // Suscribirse a cambios en el carrito
    cartItems.subscribe((items) => {
      renderCartItems(items);
    });

    cartTotal.subscribe((total) => {
      updateCartTotal(total);
    });

    // Suscribirse a errores del carrito
    cartErrors.subscribe((errorMessage) => {
      if (errorMessage) {
        showError(errorMessage);
      } else {
        hideError();
      }
    });

    // Añadir event listener al botón de checkout/pago
    if (checkoutButton) {
      checkoutButton.addEventListener("click", () => {
        procederAlPago();
      });
    }

    // Añadir event listener al botón de WhatsApp
    if (whatsappButton) {
      whatsappButton.addEventListener("click", () => {
        sendWhatsAppOrder();
      });
    }
  });
</script>
