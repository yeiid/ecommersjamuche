// Script para probar y solucionar el problema de autenticaci√≥n
import { createClient } from "@supabase/supabase-js";
import dotenv from "dotenv";
import fs from "fs/promises";
import { exec } from "child_process";
import util from "util";
import path from "path";

// Promisificar exec
const execPromise = util.promisify(exec);

// Cargar variables de entorno
dotenv.config();

// Crear cliente de Supabase
const supabaseUrl = process.env.PUBLIC_SUPABASE_URL;
const supabaseAnonKey = process.env.PUBLIC_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseAnonKey) {
  console.error("‚ùå Error: Variables de entorno no configuradas");
  console.error(
    "Aseg√∫rate de tener PUBLIC_SUPABASE_URL y PUBLIC_SUPABASE_ANON_KEY en tu archivo .env"
  );
  process.exit(1);
}

console.log("üîë Inicializando cliente de Supabase...");
const supabase = createClient(supabaseUrl, supabaseAnonKey, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    storageKey: "jamuche-auth-storage",
  },
});

// Funci√≥n para probar y arreglar la autenticaci√≥n
async function testAndFixAuth() {
  console.log("\nüìã Prueba de autenticaci√≥n y soluci√≥n:");

  try {
    // 1. Intentar iniciar sesi√≥n
    console.log(
      "‚è≥ Intentando iniciar sesi√≥n con email: admin@jamuchee.com..."
    );
    const { data, error } = await supabase.auth.signInWithPassword({
      email: "admin@jamuchee.com",
      password: "admin123",
    });

    if (error) {
      console.error(`‚ùå Error al iniciar sesi√≥n: ${error.message}`);

      // Si el error es de credenciales, intentamos crear el usuario admin
      if (error.message.includes("Invalid login credentials")) {
        await createAdminUser();
      } else {
        return false;
      }
    } else {
      console.log("‚úÖ Inicio de sesi√≥n exitoso!");
      console.log(`Usuario: ${data.user.email}`);

      // Verificar la sesi√≥n
      const session = await supabase.auth.getSession();
      console.log(`‚úÖ Sesi√≥n activa: ${!!session.data.session}`);

      // Verificar si el usuario es admin
      const isAdmin = data.user?.app_metadata?.role === "admin";
      console.log(`Usuario es admin: ${isAdmin ? "S√≠" : "No"}`);

      // Si no es admin, agregar el rol
      if (!isAdmin) {
        await addAdminRole(data.user.id);
      }
    }

    // 2. Verificar localStorage en el navegador
    console.log("\nüîç Verificando problema con localStorage:");
    console.log(
      "Para solucionar problemas de persistencia, aseg√∫rate de que en tu navegador:"
    );
    console.log(
      "1. Las cookies y almacenamiento local est√©n habilitados para tu dominio"
    );
    console.log(
      "2. No est√©s en modo inc√≥gnito o con restricciones de privacidad"
    );

    // 3. Verificar si se est√° usando correctamente el almacenamiento local
    await fixLocalStorageIssues();

    return true;
  } catch (error) {
    console.error(`‚ùå Error inesperado: ${error.message}`);
    return false;
  }
}

// Funci√≥n para crear un usuario admin si no existe
async function createAdminUser() {
  try {
    console.log(
      "\nüîß El usuario admin no existe. Intentando crear usuario admin..."
    );

    // Usar la llave de servicio para crear un usuario
    const serviceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY;
    if (!serviceRoleKey) {
      console.error(
        "‚ùå No se encontr√≥ la clave de servicio para crear el usuario admin"
      );
      return false;
    }

    const adminClient = createClient(supabaseUrl, serviceRoleKey);

    // Crear usuario
    const { data, error } = await adminClient.auth.admin.createUser({
      email: "admin@jamuchee.com",
      password: "admin123",
      email_confirm: true,
      app_metadata: { role: "admin" },
    });

    if (error) {
      console.error(`‚ùå Error al crear usuario admin: ${error.message}`);
      return false;
    }

    console.log("‚úÖ Usuario admin creado con √©xito!");
    console.log(`Usuario: ${data.user.email}`);

    return true;
  } catch (error) {
    console.error(`‚ùå Error al crear usuario admin: ${error.message}`);
    return false;
  }
}

// Funci√≥n para agregar rol de admin a un usuario
async function addAdminRole(userId) {
  try {
    console.log("\nüîß Usuario no tiene rol admin. Actualizando...");

    // Usar la llave de servicio para actualizar el usuario
    const serviceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY;
    if (!serviceRoleKey) {
      console.error(
        "‚ùå No se encontr√≥ la clave de servicio para actualizar el rol"
      );
      return false;
    }

    const adminClient = createClient(supabaseUrl, serviceRoleKey);

    // Actualizar metadatos
    const { error } = await adminClient.auth.admin.updateUserById(userId, {
      app_metadata: { role: "admin" },
    });

    if (error) {
      console.error(`‚ùå Error al actualizar rol admin: ${error.message}`);
      return false;
    }

    console.log("‚úÖ Rol de admin asignado con √©xito!");

    return true;
  } catch (error) {
    console.error(`‚ùå Error al actualizar rol admin: ${error.message}`);
    return false;
  }
}

// Funci√≥n para solucionar problemas con el localStorage
async function fixLocalStorageIssues() {
  console.log("\nüîß Verificando problemas con localStorage en los archivos...");

  // 1. Verificar si AdminLayout.astro maneja correctamente la autenticaci√≥n
  try {
    const layoutPath = path.join(
      process.cwd(),
      "src/components/admin/AdminLayout.astro"
    );
    const layoutCode = await fs.readFile(layoutPath, "utf8");

    // Verificar si hay acceso a localStorage sin verificaci√≥n
    if (
      layoutCode.includes("localStorage.getItem") &&
      !layoutCode.includes('typeof window !== "undefined"')
    ) {
      console.log(
        "‚ö†Ô∏è Encontrado: AdminLayout.astro accede a localStorage sin verificar si est√° en el lado del cliente"
      );

      // Crear versi√≥n corregida
      const fixedCode = layoutCode.replace(
        /localStorage\.getItem/g,
        'typeof window !== "undefined" && localStorage.getItem'
      );

      // Guardar archivo arreglado
      await fs.writeFile(layoutPath + ".fixed", fixedCode);
      console.log(`‚úÖ Versi√≥n corregida guardada en ${layoutPath}.fixed`);
      console.log(
        "   Revisa los cambios y reemplaza el archivo original si son correctos."
      );
    } else {
      console.log(
        "‚úÖ AdminLayout.astro parece manipular localStorage correctamente"
      );
    }

    // 2. Verificar LoginForm.astro
    const loginPath = path.join(
      process.cwd(),
      "src/components/admin/LoginForm.astro"
    );
    const loginCode = await fs.readFile(loginPath, "utf8");

    if (
      loginCode.includes("localStorage.setItem") &&
      !loginCode.includes('typeof window !== "undefined"')
    ) {
      console.log(
        "‚ö†Ô∏è Encontrado: LoginForm.astro accede a localStorage sin verificar si est√° en el lado del cliente"
      );

      // Crear versi√≥n corregida
      const fixedLoginCode = loginCode.replace(
        /localStorage\.setItem/g,
        'typeof window !== "undefined" && localStorage.setItem'
      );

      // Guardar archivo arreglado
      await fs.writeFile(loginPath + ".fixed", fixedLoginCode);
      console.log(`‚úÖ Versi√≥n corregida guardada en ${loginPath}.fixed`);
      console.log(
        "   Revisa los cambios y reemplaza el archivo original si son correctos."
      );
    } else {
      console.log(
        "‚úÖ LoginForm.astro parece manipular localStorage correctamente"
      );
    }
  } catch (error) {
    console.error(`‚ö†Ô∏è Error al verificar archivos: ${error.message}`);
  }

  // Sugerir soluci√≥n para el problema de localStorage
  console.log("\nüìù Instrucciones para solucionar problema de autenticaci√≥n:");
  console.log(
    "1. Aseg√∫rate de que el acceso a localStorage siempre verifique si est√° en el navegador:"
  );
  console.log(
    '   - typeof window !== "undefined" && localStorage.getItem(...)'
  );
  console.log(
    "2. Si est√°s usando SSR (Server-Side Rendering), aseg√∫rate de establecer cookies para autenticaci√≥n"
  );
  console.log(
    "3. Para resolver problemas de administraci√≥n, ejecuta la aplicaci√≥n y prueba con los siguientes pasos:"
  );
  console.log("   - Accede a /admin");
  console.log("   - Inicia sesi√≥n con admin@jamuchee.com / admin123");
  console.log("   - Abre la consola del navegador y ejecuta:");
  console.log('     localStorage.setItem("devModeAuth", "true")');
  console.log("   - Recarga la p√°gina");
}

// Funci√≥n para probar la conexi√≥n a Supabase
async function testSupabaseConnection() {
  console.log("\nüì° Probando conexi√≥n a Supabase...");

  try {
    const { data, error } = await supabase
      .from("products")
      .select("count", { count: "exact", head: true });

    if (error) {
      console.error(`‚ùå Error de conexi√≥n a Supabase: ${error.message}`);
      return false;
    }

    console.log("‚úÖ Conexi√≥n a Supabase exitosa!");
    return true;
  } catch (error) {
    console.error(`‚ùå Error de conexi√≥n a Supabase: ${error.message}`);
    return false;
  }
}

// Funci√≥n para analizar principios SOLID en el c√≥digo
async function analyzeSolidPrinciples() {
  console.log("\nüìä An√°lisis de principios SOLID en el c√≥digo:");

  // 1. Revisar archivos de stores para verificar responsabilidad √∫nica (S)
  console.log("\nüîç Principio de Responsabilidad √önica (S):");

  try {
    const storesPath = path.join(process.cwd(), "src/stores");
    const storeFiles = await fs.readdir(storesPath);

    console.log(`Encontrados ${storeFiles.length} archivos de stores:`);

    for (const file of storeFiles) {
      if (file.endsWith(".js")) {
        console.log(`- ${file}: Gestiona un √∫nico dominio de datos`);
      }
    }

    console.log(
      "‚úÖ Bien: Cada store se encarga de una √∫nica responsabilidad (productos, carrito, wishlist, etc.)"
    );

    // 2. Acoplamiento y Dependencias (D y O)
    console.log(
      "\nüîç Principio de Inversi√≥n de Dependencias (D) y Abierto/Cerrado (O):"
    );

    // Verificar si las dependencias est√°n bien inyectadas
    const authStorePath = path.join(storesPath, "authStore.js");
    const authStoreContent = await fs.readFile(authStorePath, "utf8");

    if (authStoreContent.includes("import { supabase }")) {
      console.log(
        "‚ö†Ô∏è Sugerencia: AuthStore importa supabase directamente, podr√≠a mejorarse con inyecci√≥n de dependencias"
      );
      console.log(
        "   Mejor pr√°ctica: Recibir el cliente de Supabase como par√°metro para facilitar pruebas y cambios"
      );
    }

    // 3. Segregaci√≥n de Interfaces (I)
    console.log("\nüîç Principio de Segregaci√≥n de Interfaces (I):");
    console.log(
      "‚úÖ Bien: Los componentes est√°n divididos por funcionalidad y no dependen de interfaces que no usan"
    );
    console.log("   - Componentes de admin separados de componentes p√∫blicos");
    console.log("   - Stores espec√≠ficos para cada dominio de datos");

    return true;
  } catch (error) {
    console.error(`‚ùå Error al analizar principios SOLID: ${error.message}`);
    return false;
  }
}

// Funci√≥n principal
async function main() {
  console.log("üöÄ Iniciando diagn√≥stico y soluci√≥n de problemas...");

  // Probar conexi√≥n a Supabase
  const connectionSuccess = await testSupabaseConnection();
  if (!connectionSuccess) {
    console.error(
      "‚ö†Ô∏è La conexi√≥n a Supabase fall√≥. Verifica las credenciales y la conectividad."
    );
  }

  // Probar y arreglar autenticaci√≥n
  const authSuccess = await testAndFixAuth();
  if (!authSuccess) {
    console.error("‚ö†Ô∏è Las pruebas de autenticaci√≥n fallaron.");
  }

  // Analizar principios SOLID
  await analyzeSolidPrinciples();

  console.log("\nüéØ Recomendaciones finales:");
  console.log(
    "1. Utiliza inyecci√≥n de dependencias para facilitar pruebas y seguir el principio de inversi√≥n de dependencias"
  );
  console.log(
    "2. Implementa manejo de errores m√°s robusto en las funciones de autenticaci√≥n"
  );
  console.log(
    "3. Considera utilizar interceptores para manejar errores de manera global"
  );
  console.log(
    "4. Para la autenticaci√≥n en modo desarrollo, aseg√∫rate de tener un enfoque m√°s consistente"
  );

  console.log("\nüéâ Diagn√≥stico completo!");
}

// Ejecutar
main().catch((error) => {
  console.error(`‚ùå Error fatal: ${error.message}`);
  process.exit(1);
});
