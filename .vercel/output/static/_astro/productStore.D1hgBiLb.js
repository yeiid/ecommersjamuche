import{w as p}from"./index.Bj88MMzq.js";import{s as l}from"./supabase.CIJy6KaJ.js";import{z as e}from"./client.schema.D9gTZs88.js";const I=e.number().int("El precio debe ser un número entero").positive("El precio debe ser un número positivo").refine(r=>r>=1e3,"El precio mínimo es de 1000"),m=e.string().uuid("El ID del producto debe ser un UUID válido"),_=e.string().min(1,"La URL de imagen es obligatoria").refine(r=>r.startsWith("/")||r.startsWith("http"),"La imagen debe ser una ruta válida que empiece con '/' o 'http'"),g=e.object({name:e.string().min(3,"El nombre del producto debe tener al menos 3 caracteres").max(100,"El nombre no puede exceder los 100 caracteres"),price:I,discountprice:e.number().int("El precio con descuento debe ser un número entero").nonnegative("El precio con descuento debe ser un número no negativo").optional().default(0),image:_,description:e.string().min(10,"La descripción debe tener al menos 10 caracteres").max(2e3,"La descripción no puede exceder los 2000 caracteres"),category:e.string().min(2,"La categoría debe tener al menos 2 caracteres").max(50,"La categoría no puede exceder los 50 caracteres"),stock:e.number().int("El stock debe ser un número entero").nonnegative("El stock no puede ser negativo").optional().default(0),isnew:e.boolean().optional().default(!1),featured:e.boolean().optional().default(!1),rating:e.number().min(0,"La calificación mínima es 0").max(5,"La calificación máxima es 5").optional().default(0),features:e.array(e.string()).optional().default([]),ingredients:e.array(e.string()).optional().default([]),cuidados:e.string().optional(),dificultad:e.string().optional(),especieid:e.union([m,e.literal(""),e.null()]).optional().nullable()}),x=g;g.extend({id:m,created_at:e.string().datetime().optional(),updated_at:e.string().datetime().optional()});const L=g.partial();function y(r){return x.parse(r)}function P(r){return L.parse(r)}function h(){return crypto.randomUUID()}function S(r,o=!0){try{const t=structuredClone(r);return o&&!t.id&&(t.id=h()),o?y(t):P(t)}catch(t){throw console.error("Error al preparar producto:",t),t}}const U=e.object({nombre:e.string().min(1,"El nombre de la especie es obligatorio"),nombreCientifico:e.string().min(1,"El nombre científico es obligatorio"),familia:e.string().optional(),origen:e.string().optional(),descripcion:e.string().min(1,"La descripción de la especie es obligatoria"),propiedades:e.string().optional(),usos:e.string().optional(),imagen:e.string().min(1,"La imagen de la especie es obligatoria"),imagenDetalle:e.string().optional(),featured:e.boolean().optional().default(!1)});U.extend({id:e.string().uuid("El ID de la especie debe ser un UUID válido"),created_at:e.string().datetime().optional(),updated_at:e.string().datetime().optional()});U.partial();e.object({id:e.string().uuid("El ID de la especie debe ser un UUID válido")});const j=e.object({id:e.string().uuid("El ID del producto debe ser un UUID válido"),name:e.string().min(1,"El nombre del producto es obligatorio"),price:e.number().int().positive("El precio debe ser un número positivo"),discountprice:e.number().int().nonnegative().optional().default(0),quantity:e.number().int().positive("La cantidad debe ser un número positivo"),image:e.string().optional(),total:e.number().int().nonnegative()}),w=e.object({usuario_nombre:e.string().min(1,"El nombre del usuario es obligatorio"),usuario_email:e.string().email("El email debe tener un formato válido"),usuario_telefono:e.string().optional(),direccion:e.string().min(1,"La dirección es obligatoria"),ciudad:e.string().min(1,"La ciudad es obligatoria"),estado:e.string().min(1,"El estado/provincia es obligatorio"),codigo_postal:e.string().optional(),productos:e.array(j).min(1,"El pedido debe tener al menos un producto"),total:e.number().int().positive("El total debe ser un número positivo"),estado_pedido:e.string().optional().default("pendiente"),notas:e.string().optional()});w.extend({id:e.string().uuid("El ID del pedido debe ser un UUID válido"),fecha_pedido:e.string().datetime().optional(),fecha_envio:e.string().datetime().optional()});w.partial();e.object({id:e.string().uuid("El ID del pedido debe ser un UUID válido")});class d extends Error{constructor(o,t=null){super(o),this.name="DatabaseError",this.cause=t}}function b(r){return r?r.code==="23505"?{_error:"Ya existe un registro con esos datos"}:r.code==="23503"?{_error:"La referencia a otro registro no es válida"}:r.code==="22P02"?{_error:"Formato de UUID inválido"}:{_error:r.message||"Error en la operación con la base de datos"}:{_error:"Error desconocido"}}const u=p([]),E=p(!1),v=p("");async function q(){E.set(!0),v.set("");try{const{data:r,error:o}=await l.from("products").select("*, especies(*)");if(o)throw new d("Error al cargar productos",o);u.set(r||[])}catch(r){const o=r instanceof d?r.message:"Error al cargar los productos: "+r.message;v.set(o),console.error(o,r)}finally{E.set(!1)}}async function W(r){try{const o=!r.id,t=S(r,!o),{id:s,...f}=t;if(s){const{data:c,error:n}=await l.from("products").update(f).eq("id",s).select().single();if(n){const i=b(n);throw new d(i._error,n)}return u.update(i=>{const a=i.findIndex(D=>D.id===s);return a!==-1&&(i[a]=c),i}),c}else{const c={...f,id:h()},{data:n,error:i}=await l.from("products").insert(c).select().single();if(i){const a=b(i);throw new d(a._error,i)}return u.update(a=>[...a,n]),n}}catch(o){throw console.error("Error al guardar producto:",o),o}}async function F(r){try{m.parse({id:r});const{error:o}=await l.from("products").delete().eq("id",r);if(o)throw new d(`Error al eliminar producto ${r}`,o);return u.update(t=>t.filter(s=>s.id!==r)),!0}catch(o){return console.error(`Error al eliminar producto ${r}:`,o),!1}}q();export{F as d,W as s};
